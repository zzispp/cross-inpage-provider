import React, { RefObject, useMemo, useState } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
// import Image from 'next/image';
import Link from 'next/link';
import styles from '../styles/Home.module.css';
import packageJson from '../package.json';
import { useEffect } from 'react';
import { Tree } from 'react-arborist';
import * as uuid from 'uuid';
import { Button } from '../components/ui/button';
import { registeredChains, thirdPartyChains } from '../chains';

const data: ITreeNodeData[] = [
  {
    id: uuid.v4(),
    name: 'General',
    children: [
      { id: uuid.v4(), name: 'iframe', href: '/iframe' },
      { id: uuid.v4(), name: 'Multichain', href: '/multichain' },
      { id: uuid.v4(), name: 'Tools', href: '/tools' },
      { id: uuid.v4(), name: 'DeepLink', href: '/deeplink' },
      {
        id: uuid.v4(),
        name: 'Hardware SDK',
        href: 'https://hardware-example.onekeytest.com/',
      },
    ],
  },
  {
    id: uuid.v4(),
    name: 'Networks & Chains',
    children: registeredChains as ITreeNodeData[],
  },
  {
    id: uuid.v4(),
    name: 'ThirdParty Example',
    children: thirdPartyChains as ITreeNodeData[],
  },
];

type ITreeNodeInfo = {
  isLeaf: boolean;
  isOpen: boolean;
  isClosed: boolean;
  isInternal: boolean;
  data: ITreeNodeData;
  toggle: () => void;
};
type ITreeNodeData = {
  id: string;
  name: string;
  icon?: string;
  href?: string;
  target?: string;
  children?: ITreeNodeData[];
};

type ITreeNodeProps = {
  node: ITreeNodeInfo;
  style: unknown;
  dragHandle: RefObject<HTMLDivElement>;
};
function TreeNode({ node, style, dragHandle }: ITreeNodeProps) {
  const { href, target, name, icon } = node.data;

  const link = useMemo(() => {
    if (href) {
      if (target) {
        return (
          <a href={href} target={target} className="text-black font-normal hover:underline">
            {`${name} →`}
          </a>
        );
      } else {
        return (
          <Link href={href} className="text-black font-normal hover:underline">{`${name} →`}</Link>
        );
      }
    }

    return <span className="text-lg font-medium">{name}</span>;
  }, [name, target, href]);

  const imgIcon = useMemo(() => {
    if (icon) {
      return <img alt={icon} src={icon} className="w-6 h-6 rounded-full" />;
    }
    if (node.isInternal) {
      if (node.isClosed) {
        return '📁';
      }
      return '📂';
    }
    return '👉';
  }, [icon, node.isClosed, node.isInternal]);

  return (
    <div
      style={style}
      ref={dragHandle}
      onClick={() => node.toggle()}
      className="flex flex-row items-center cursor-pointer"
    >
      <div className="flex flex-row items-center min-w-4 mr-2">{imgIcon}</div>
      {link}
    </div>
  );
}

const Home: NextPage = () => {
  useEffect(() => {
    void fetch(`/api/hello?_=${Date.now()}`);
  }, []);
  // const [chainId, setChainId] = useState('');
  // useEffect(() => {
  //   // @ts-ignore
  //   // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
  //   global?.$onekey?.ethereum?.request({ method: 'net_version' }).then((res: any) => {
  //     // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  //     setChainId(res);
  //   });
  // }, []);

  return (
    <div className="container mx-auto p-2">
      <Head>
        <title>Dapp Example - VcWallet</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className="flex flex-row items-center justify-between">
        <h2 className="text-2xl font-bold">Dapp Example - VcWallet</h2>
        <Button onClick={() => window.location.reload()} variant="outline">
          Refresh Page
        </Button>
      </header>

      <main className="main flex flex-col items-center py-6">
        <Tree height={1200} initialData={data} rowHeight={42} indent={30}>
          {TreeNode as any}
        </Tree>
      </main>

      <footer className={styles.footer}>
        <a>
          {/* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */}v
          {packageJson.version}
        </a>
        <iframe
          src="https://ghbtns.com/github-btn.html?user=OneKeyHQ&repo=cross-inpage-provider&type=star&count=true"
          frameBorder="0"
          scrolling="0"
          title="GitHub"
          height={20}
          width={100}
        />
        <a href="https://www.onekey.so" target="_blank" rel="noopener noreferrer">
          Powered by VcWallet →
        </a>
      </footer>
    </div>
  );
};

export default Home;
